1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура - выччислительная или сетевая архитектура.
В основе два компонента - клиент и сервер - и то, и то является програмным обеспечением, которые расположены на вычислительных машиных (может быть и на одной).
Клиент - заказчик услуг, делает запрос; сервер - поставщик услуг, дает ответ в виде данных или сервисных функций.

Функции, которые реализуются на стороне сервера:
	хранение, доступ, защита, и резервное копирование данных;
	обработка клиентского запроса;
	отправка результата (ответа) клиента.

Функции, которые реализуются на стороне клиента:
	предоставление пользовательского интерфейса;
	формулирование запроса к серверу и его отправка;
	получение результатов запроса и отправка дополнительных команд (запросов на дополнения, обновление и удаление данных).

Клиент и сервер взаимодействуют между собой через вычислительную сеть посредством сетевых протоколов (набор правил взаимодействия между компьютерами).
Примеры сетевых протоколов:
TCP, IP, MAC, UDP, HTTP, FTP, POP3 ...

Концепции построение системы клиент-сервер:

Слабый (тонкий) клиент - концепция, в которой клиент переносит задание обработки данных на сервер. Вычислительных мощностей такого клиента должно быть достаточно для только для запуска необходимого сетевого приложения.

	Плюси:
	уменьшается необходимость обслуживания аппаратного оборудования и програмного обеспечения;
	уменьшение риска неисправностей, тк файлы сохраняются на центральном сервере;
	меньшие требования к аппаратному оеспечению.

	Минусы:
	общая точка отказа;
	невозможность работы без подключения к сети;
	обработка больших объемов информации (видео, аудио) приводит к снижению продуктивности центрального сервера.

	Сильный (толстий) клиент - концепция, в которой клиент сам обрабатывает информацию. Сервер выступает в качестве БД.

	Плюсы:
	широкая функциональность;
	режим работы со многими пользователями;
	работа в оффлайн режиме;
	высокое быстродействие;
	минимизация зависимости от дорогих и сложных серверов.

	Минусы:
	каждый компьютер требует постоянного обслуживания;
	индивидуальное обновление аппаратного обеспечения до уровня испольуемого приложения;
	возможные проблемы с удаленным доступом к данным;
	большие размеры дистрибутивов.

Уровни клиент-серверной архитектуры:
Двохуровневая архитектура:
Уровень 1 - клиент, отправляет запрос на сервер получает ответ от сервера;
Уровень 2 - сервер получает запрос от клиента, отправляет запрос в базу данных, получает ответ от БД, формирует пакет данных, отправляет ответ клиенту.

Трехуровневая архитектура:
Уровень 1 - клиент, отправляет запрос на сервер получает ответ от сервера;
Уровень 2 - сервер получает запрос от клиента, отправляет запрос в базу данных и на дополнительный сервер, получает ответ от БД и дополнительного сервера, формирует пакет данных, отправляет ответ клиенту.
Уровень 3 - дополнительный сервер получает запрос от сервера, который формирует ответ клиенту, отоправляет запрос в другую БД, формирует и отправляет паке данных серверу, который формирует ответ клиенту.

Балансировка нагрузки - совокупность методов распределения задач между устройствами.
Цель : сокращение времени обслуживание и увеличение выполнения масимального объёма задач оптимизация используемых аппаратных, вычислительных и сетевых ресурсов.

Уровень1			Уровень2
Клиент		<=>	(балансировщик <=> сервер <=> бд)

Балансировщик в фоновом режиме проводит мониторинг доступности серверов и поиск маршрутов к ним.

2) Что такое HTTP и HTTPS

HTTP (Hyper Text Transfer Protocol) - протокол передачи гипертекста прикладного уровня в сети от клиента к серверу и обратно. Инициатором запросов всегда выступает клиент.
Запросы всегда формируются в строгой последовательности и отвечают определённой форме.

НTTP запрос имеет три составляющих:
	строка запроса (содержит метод передачи, URL-адрес, версию НTTP);
	заголовок (используеся для отправки метаданных про ресурси);
	тело сообщения (хранит данные, которые передаются в запросе).
	
HTTP ответ содержит:
	статус код;
	НTTP заголовки;
	тело, которое содержит запрашивае мую информацию.

HTTPS - тот же протокол HTTP, но с надстройкой безопасности. Т.е. информация передаётся в зашифрованом виде. Данные передаются поверх криптографических протоколов TLS или SSL (устарел). Чтобы подготовить веб-сервер для обработки такого соединения нужно установить в систему сертификат открытого и закрытого ключа. Сертификат получают в центре сертификации. Существует возможность создать сертификат не обращаясь в центр сертификации.

3) HTTP методы

Методы HTTP запроса указывают, какое желаемое действие выполнится для данного ресурса.

Каждый реализует свою семантику (от греч. σημαντιϰός – обозначающий), но каждая группа команд разделяет общие свойства: так, методы могут быть безопасными, идемпотентными или кешируемыми.

GET
Запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

POST
Используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

PUT
Заменяет все текущие представления ресурса данными запроса.

PATCH
Используется для частичного изменения ресурса.

DELETE
Удаляет указанный ресурс.

HEAD
Запрашивает ресурс так же, как и метод GET, но без тела ответа.

CONNECT
Устанавливает "туннель" к серверу, определённому по ресурсу.

OPTIONS
Используется для описания параметров соединения с ресурсом.

TRACE
Выполняет вызов возвращаемого тестового сообщения с ресурса.

11) Безопасные HTTP методы

Метод является безопастным, если он не меняет состояние сервера. Т.е. такой метод проводит только чтение информации.
Безопастными являются методы GET, HEAD, OPTIONS. Все безопастные методы идемпотентны.
При запросе информации безопастными методами сервер может изменить свое состояние, например он сохраняет статистику.
 
10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
GET, HEAD, PUT, OPTIONS, и DELETE идемпотентны.

4) HTTP статус коды сервера



5) Что такое ядро браузера

Представляет собой программу, которая преобразует содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т. д.) и информацию о форматировании (в форматах CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на экране. Браузерный движок обычно используется в веб-браузерах (отсюда название), почтовых клиентах и других программах, нуждающихся в отображении и редактировании содержимого веб-страниц.

6) Какие браузеры какиие ядра используют

Chrome, Microsoft Edge, Opera, Vivaldi - Blink — движок браузера Chromium (ответвление WebKit).
Mozilla, Firefox - Gecko — открытый движок проекта Mozilla.
Google Chrome (до 2013 года) - WebKit — движок для браузера Apple Safari.

7) Что такое API

Application Programming Interface — «программный интерфейс приложения».
описание способов (набор классов, процедур, функций, структур или констант), которыми одна компьютерная программа может:
взаимодействовать с другой программой, 
обмениваться информацией с другой программой, 
передавать информацию из одного интерфейса, например мобильного приложения, в другой.
Т.е. программные компоненты взаимодействуют друг с другом посредством API.
Чтобы сгенерировать полную веб-страницу, браузер ожидает ответ на языке разметки HTML, в то время как API вернёт просто данные в формате вроде JSON.
Самые популярные протоколы API - REST и SOAP - используются подавляющим большинством открытых API-интерфейсов.
SOAP — это формат протокола. REST — это архитектурный подход.
В SOAP используется формат SOAP XML для запросов и ответов.
В REST обмен сообщениями происходит на основе XML, JSON или любого другого удобного формата.

8) Что такое ендпоинты

endpoint - это только часть url
конечная точка — это один конец канала связи
Когда API взаимодействует с другой системой, точки взаимодействия этого взаимодействия считаются конечными точками.
Root-endpoint  - это точка приема запроса на стороне сервера.

9) URL (URI, URL, URN)

Uniform Resource Identifier (унифицированный идентификатор ресурса) - указывает, где и как найти ресурс. При формировании конкретного запроса к нему могут добавляться разные параметры. Комбинация этих параметров и URL представляет URI.
URL — это URI, который, помимо идентификации ресурса, предоставляет ещё и информацию о местонахождении этого ресурса. 
URN — это URI, который только идентифицирует ресурс в определённом пространстве имён (и, соответственно, в определённом контексте), но не указывает его местонахождение.

12) Иденфикация, Аутентификация, Авторизация

Идентификация — процесс распознавания пользователя по его идентификатору (логин, адрес электронной почты, номер мобильного).

Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает.
Биометрические данные: сканеры лица, отпечатки пальцев или сетчатки глаза.
Числовые, текстовые, символьные и др.: pin-коды, пароли, графические ключи, секретные слова.
В данном качестве может выступать токен, то есть компактное устройство, предназначенное для обеспечения информационной безопасности пользователя, также используется для идентификации владельца.

Авторизация — предоставление определённых прав.

13) Что такое IP

host - любое устройство в сети которое имеет интерфейс, еденица в сети.

сетевой интерфейс - устройство соединения с сетью, сетевая карта, блютуз адаптер и тд. Любой интервейс имеет IP-адрес.

IP-адрес (от англ. Internet Protocol) — уникальный числовой идентификатор устройства в компьютерной сети, работающей по протоколу IP.

IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

В 4-й версии протокола IP-адрес представляет собой 32-битное число. Как правило, адрес записывается в виде четырёх десятичных чисел значением от 0 до 255 (эквиваленты четырём восьмибитным числам), разделённых точками, например, 192.168.0.3.

В 6-й версии IP-адрес является 128-битным. Как правило, адрес записывается в виде восьми четырёхзначных шестнадцатеричных чисел (эквивалентны восьми 16-битным числам), разделённых двоеточиями, например, 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Ведущие нули допускается в записи опускать. Нулевые группы, идущие подряд, могут быть опущены, вместо них ставится двойное двоеточие (fe80:0:0:0:0:0:0:1 можно записать как fe80::1). Более одного такого пропуска в адресе не допускается.

Иногда встречается запись IP-адресов вида «192.168.5.0/24». Данный вид записи заменяет собой указание диапазона IP-адресов. Число после косой черты означает количество единичных разрядов в маске подсети. Для приведённого примера маска подсети будет иметь двоичный вид 11111111 11111111 11111111 00000000 или то же самое в маршрутизаторе десятичном виде: «255.255.255.0». 24 разряда IP-адреса отводятся под номер сети, а остальные 8 разрядов полного адреса — под адреса хостов этой сети, адрес этой сети и широковещательный адрес этой сети. Итого, 192.168.5.0/24 означает диапазон адресов хостов от 192.168.5.1 до 192.168.5.254, а также 192.168.5.0 — адрес сети и 192.168.5.255 — широковещательный адрес сети.

Ряд стандартных адресов, предназначенных для локальных сетей : 192.168.0.0 — 192.168.255.255 (маска подсети: 255.255.0.0 или /16).

Для сети, состоящей только из одного компьютера, как правило, используется всего один адрес — 127.0.0.1.

Широковещательный адрес — условный (не присвоенный никакому устройству в сети) адрес, который используется для передачи широковещательных пакетов в компьютерных сетях.
Широковещательный канал, широковещание (англ. broadcasting) — метод передачи данных в компьютерных сетях, при котором поток данных (каждый переданный пакет в случае пакетной передачи) предназначен для приёма всеми участниками сети.

Маска подсети - способ задать размер сети.

14) Что такое октаты в DNS

DNS (англ. Domain Name System «система доменных имён») — компьютерная распределительная система для получения информации о доменах. Чаще всего используется для получения IP-адреса по имени хоста (компьютера или устройства), получения информации о маршрутизации почты и/или обслуживающих узлах для протоколов в домене.

Она представляет собой иерархический децентрализованный каталог именования компьютеров, служб или иных ресурсов, которые подключены к глобальной или отдельной сети.

DNS-сервер (синоним - сервер имен) - это сервер, который содержит базу данных публичных IP-адресов и связанных с ними имен хостов.

Все связанные записи домена называются зоной DNS. Это отдельная часть пространства имен домена, за которое обычно отвечает юридическое лицо – организация или компания, которые несут ответственность за поддержание региональных связей в веб-пространстве. Зона DNS является административной функцией, позволяющей детально контролировать компоненты DNS, такие как авторитетные серверы имен.

Основные сервера разделяют пространство зоны на несколько частей. Они определяют домены верхнего уровня (такие, как «.org» или «.com»), домены второго уровня (например, «ukraine.com.ua») и домены нижнего уровня, также называемые поддоменами (например, «support.ukraine.com.ua»). Каждый из этих уровней может быть отдельной зоной DNS.

Например, корневой домен «ukraine.com.ua» делегируется корпорации Хостинг Украина. Она принимает на себя ответственность за настройку основного DNS-сервера, который содержит правильные записи DNS для домена.

DNS зона имеет иерархическую структуру: корневой домен (базовый сервер) >домен первого уровня > FQDN > домен второго уровня > далее идет имя хоста или домен третьего уровня.
Нижестоящий домен называют поддоменом, их записи можно делегировать другому серверу.
Домен первого и второго уровня или TLD: национальные и общие домены: ua, com.
FQDN - определяет имя домена, хранит запись всех доменов, включая корневой. Схож своими функциями с абсолютным именем в файловой системе.
Ресурсная запись – под этим термином подразумевается простейшая единица хранения данных. У каждого узла есть свое уникальное имя. DNS зона объединяет несколько имен доменов.

Для того чтоб зарегистрированный домен работал необходимо минимум два DNS сервера. Пример: alpha.freehost.com.ua; beta.freehost.com.ua. Регистратор доменов как правило предоставляет свои сервера для хранения DNS зоны.

Когда веб-браузеру или другому сетевому устройству необходимо найти IP-адрес для имени хоста, например «example.com», он выполняет поиск DNS - по существу, проверку зоны DNS - и отправляется на сервер DNS, который управляет зоной, указанной в адресе для этого имени хоста. Этот сервер называется официальным сервером имен для домена. Затем официальный сервер имен разрешает поиск DNS, предоставляя IP-адрес или другие данные для запрошенного имени хоста.

На каждом иерархическом уровне системы DNS имеется сервер имен, содержащий файл зоны, в котором хранятся защищенные и правильные записи DNS для этой зоны.

Октет - часть ip-адреса

15) Что такое порт, сколько портов у Linux сервера

Сетевой порт - системный ресурс (идентифицируемый номером), который выделяется приложению, которое выполняется на некотором сетевом хосте (компьютере, сервере, моб. телефоне), для связи с приложениями, которые выполняются на других сетевых хостах или на этом же хосте. 

Записывается в заголовках протоколов транспортного уровня сетевой модели OSI (TCP, UDP, SCTP, DCCP).

Для каждого из протоколов TCP и UDP стандарт определяет возможность одновременного выделения на хосте до 65536 уникальных портов, идентифицирующихся номерами от 0 до 65535.

В большинстве UNIX-подобных операционных систем прослушивание портов с номерами 0—1023 (почти все из которых зарегистрированы) требует особых привилегий. Каждый из остальных портов может быть захвачен первым запросившим его процессом.

Порты TCP не пересекаются с портами UDP. То есть, порт 1234 протокола TCP не будет мешать обмену по UDP через порт 1234.

16) Уровни OSI

сетевая модель стека (магазина) сетевых протоколов

						Прикладной(TCP/IP)

7(OSI)	Прикладной уровень	Доступ к сетевым службам					HTTP, FTP, POP3
6(OSI)	Уровень представления	Представление и шифрование данных				JPEG, MIDI
5(OSI)	Сеансовый уровень	Управление сеансом связи					

						Транспортный(TCP/IP)

4(OSI)	Транспортный уровень	Прямая связь между конечными пунктами и надёжность		TCP, UDP, SCTP, Порты

					Сетевой (Межсетевой)(TCP/IP)

3(OSI)	Сетевой уровень		Определение маршрута и логическая адресация			IPv4, IPv6   Маршрутизатор

				Уровень сетевого доступа (Канальный) (TCP/IP)

2(OSI)	Канальный уровень	Физическая адресация						сетевая карта
1(OSI)	Физический уровень 	Работа со средой передачи, сигналами и двоичными данными 	USB, RJ («витая пара», коаксиальный, оптоволоконный), радиоканал


17) Хедеры http запросов

ЦЕЛЬ
A-IM: feed

Экземплярные манипуляции, допустимые в ответе. Определено вRFC 3229

Принимать
Accept: application/json

Допустимый тип / типы носителя

Accept-Charset
Accept-Charset: utf-8

Допустимая кодировка

Принять-кодирование
Accept-Encoding: gzip, deflate

Список допустимых кодировок

Принять-язык
Accept-Language: en-US

Список допустимых языков

Принять-Datetime
Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT

Запросить прошлую версию ресурса до истечения даты и времени.

Доступ-Контроль-Запрос-Метод
Access-Control-Request-Method: GET

Используется вCORSзапрос

Заголовки запроса-контроля доступа
Access-Control-Request-Headers: origin, x-requested-with, accept

Используется вCORSзапрос

Авторизация
Authorization: Basic 34i3j4iom2323==

Учетные данные базовой аутентификации HTTP

Кэш-контроль
Cache-Control: no-cache

Установите правила кеширования

Связь
Connection: keep-alive

Параметры управления для текущего соединения. Принимаетkeep-aliveиclose. Устарело вHTTP/2

Content-Length
Content-Length: 348

Длина тела запроса в байтах

Тип содержимого
Content-Type: application/x-www-form-urlencoded

Тип содержимого тела запроса (используется в запросах POST и PUT).

Cookie-файлы
Cookie: name=value

Узнать больше о файлах cookie

Дата
Date: Tue, 15 Nov 1994 08:12:31 GMT

Дата и время отправки запроса.

Ожидать
Expect: 100-continue

Обычно он используется при отправке большого тела запроса. Мы ожидаем, что сервер вернет100 ContinueСтатус HTTP, если он может обработать запрос, или417 Expectation Failedесли не

Переадресовано
Forwarded: for=192.0.2.60; proto=http; by=203.0.113.43

Раскрыть исходную информацию о клиенте, подключающемся к веб-серверу через HTTP-прокси. Используется только для целей тестирования, так как раскрывает конфиденциальную информацию.

Из
From: user@example.com

Электронный адрес пользователя, отправившего запрос. Предназначен для использования, например, для указания контактного адреса электронной почты для ботов.

Хозяин
Host: flaviocopes.com

Доменное имя сервера (используется для определения сервера с виртуальным хостингом) и номер TCP-порта, на котором сервер прослушивает. Если порт не указан, предполагается 80. Это обязательный заголовок HTTP-запроса.

Если совпадение
If-Match: "737060cd8c284d8582d"

Учитывая один (или несколько)ETags, сервер должен отправлять ответ только в том случае, если текущий ресурс совпадает с одним из этих тегов ETag. В основном используется в методах PUT для обновления ресурса, только если он не был изменен с момента последнего обновления его пользователем.

If-Modified-Since
If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT

Позволяет вернуть304 Not Modifiedзаголовок ответа, если содержимое не изменилось с этой даты

Если-нет-совпадение
If-None-Match: "737060cd882f209582d"

Позволяет304 Not Modifiedзаголовок ответа, который будет возвращен, если содержимое не изменилось. ПротивоположностьIf-Match.

Если-диапазон
If-Range: "737060cd8c9582d"

Используется для возобновления загрузки, возвращает частичное, если условие соответствует (ETag или дата), или полный ресурс, если нет.Узнать больше

Если-Неизмененный-С
If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT

Отправлять ответ только в том случае, если объект не был изменен с указанного времени

Макс-нападающие
Max-Forwards: 10

Ограничьте количество раз, когда сообщение может быть переадресовано через прокси или шлюзы.

Источник
Origin: http://mydomain.com

Отправить текущий домен для выполненияCORSзапрос, используемый в HTTP-запросе OPTIONS (чтобы запросить у сервера заголовки ответа Access-Control)

Прагма
Pragma: no-cache

Используется для обратной совместимости с кешами HTTP / 1.0

Прокси-авторизация
Proxy-Authorization: Basic 2323jiojioIJOIOJIJ==

Учетные данные для подключения к прокси

Классифицировать
Range: bytes=500-999

Запросить только определенную часть ресурса

Референт
Referer: https://flaviocopes.com

Адрес предыдущей веб-страницы, с которой переходили по ссылке на текущую запрашиваемую страницу.

TE
TE: trailers, deflate

Укажите кодировки, которые может принять клиент. Допустимые значения:compress,deflate,gzip,trailers. Толькоtrailers is supported in HTTP/2

Пользователь-агент
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36

Строка, которая идентифицирует пользовательский агент.

Обновление
Upgrade: h2c, HTTPS/1.3, IRC/6.9, RTA/x11, websocket

Ask the server to upgrade to another protocol. Deprecated in HTTP/2

Через
Via: 1.0 fred, 1.1 example.com (Apache/1.1)

Сообщает серверу о прокси, через которые был отправлен запрос

Предупреждение
Warning: 199 Miscellaneous warning

Общее предупреждение о возможных проблемах со статусом сообщения. Принимаетособый диапазон значений.

Нестандартные заголовки
Также есть несколько широко используемых нестандартных заголовков, в том числе:

Dnt
DNT: 1

Если включено, просит серверы не отслеживать пользователя.

X-Requested-With
X-Requested-With: XMLHttpRequest

ОпределяетXHRЗапросы

X-CSRF-Token
X-CSRF-Token: <TOKEN>

Используется для предотвращения CSRF
