1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура - выччислительная или сетевая архитектура.
В основе два компонента - клиент и сервер - и то, и то является програмным обеспечением, которые расположены на вычислительных машиных (может быть и на одной).
Клиент - заказчик услуг, делает запрос; сервер - поставщик услуг, дает ответ в виде данных или сервисных функций.

Функции, которые реализуются на стороне сервера:
	хранение, доступ, защита, и резервное копирование данных;
	обработка клиентского запроса;
	отправка результата (ответа) клиента.

Функции, которые реализуются на стороне клиента:
	предоставление пользовательского интерфейса;
	формулирование запроса к серверу и его отправка;
	получение результатов запроса и отправка дополнительных команд (запросов на дополнения, обновление и удаление данных).

Клиент и сервер взаимодействуют между собой через вычислительную сеть посредством сетевых протоколов (набор правил взаимодействия между компьютерами).
Примеры сетевых протоколов:
TCP, IP, MAC, UDP, HTTP, FTP, POP3 ...

Концепции построение системы клиент-сервер:

Слабый (тонкий) клиент - концепция, в которой клиент переносит задание обработки данных на сервер. Вычислительных мощностей такого клиента должно быть достаточно для только для запуска необходимого сетевого приложения.

	Плюси:
	уменьшается необходимость обслуживания аппаратного оборудования и програмного обеспечения;
	уменьшение риска неисправностей, тк файлы сохраняются на центральном сервере;
	меньшие требования к аппаратному оеспечению.

	Минусы:
	общая точка отказа;
	невозможность работы без подключения к сети;
	обработка больших объемов информации (видео, аудио) приводит к снижению продуктивности центрального сервера.

	Сильный (толстий) клиент - концепция, в которой клиент сам обрабатывает информацию. Сервер выступает в качестве БД.

	Плюсы:
	широкая функциональность;
	режим работы со многими пользователями;
	работа в оффлайн режиме;
	высокое быстродействие;
	минимизация зависимости от дорогих и сложных серверов.

	Минусы:
	каждый компьютер требует постоянного обслуживания;
	индивидуальное обновление аппаратного обеспечения до уровня испольуемого приложения;
	возможные проблемы с удаленным доступом к данным;
	большие размеры дистрибутивов.

Уровни клиент-серверной архитектуры:
Двохуровневая архитектура:
Уровень 1 - клиент, отправляет запрос на сервер получает ответ от сервера;
Уровень 2 - сервер получает запрос от клиента, отправляет запрос в базу данных, получает ответ от БД, формирует пакет данных, отправляет ответ клиенту.

Трехуровневая архитектура:
Уровень 1 - клиент, отправляет запрос на сервер получает ответ от сервера;
Уровень 2 - сервер получает запрос от клиента, отправляет запрос в базу данных и на дополнительный сервер, получает ответ от БД и дополнительного сервера, формирует пакет данных, отправляет ответ клиенту.
Уровень 3 - дополнительный сервер получает запрос от сервера, который формирует ответ клиенту, отоправляет запрос в другую БД, формирует и отправляет паке данных серверу, который формирует ответ клиенту.

Балансировка нагрузки - совокупность методов распределения задач между устройствами.
Цель : сокращение времени обслуживание и увеличение выполнения масимального объёма задач оптимизация используемых аппаратных, вычислительных и сетевых ресурсов.

Уровень1			Уровень2
Клиент		<=>	(балансировщик <=> сервер <=> бд)

Балансировщик в фоновом режиме проводит мониторинг доступности серверов и поиск маршрутов к ним.

2) Что такое HTTP и HTTPS

HTTP (Hyper Text Transfer Protocol) - протокол передачи гипертекста прикладного уровня в сети от клиента к серверу и обратно. Инициатором запросов всегда выступает клиент.
Запросы всегда формируются в строгой последовательности и отвечают определённой форме.
НTTP запрос имеет три составляющих:
строка запроса (содержит метод передачи, URL-адрес, версию НTTP);
заголовок (используеся для отправки метаданных про ресурси);
тело сообщения (хранит данные, которые передаются в запросе).
HTTP ответ содержит:
статус код;
НTTP заголовки;
тело, которое содержит запрашивае мую информацию.

HTTPS - тот же протокол HTTP, но с надстройкой безопасности. Т.е. информация передаётся в зашифрованом виде. Данные передаются поверх криптографических протоколов TLS или SSL (устарел). Чтобы подготовить веб-сервер для обработки такого соединения нужно установить в систему сертификат открытого и закрытого ключа. Сертификат получают в центре сертификации. Существует возможность создать сертификат не обращаясь в центр сертификации.

3) HTTP методы
Методы HTTP запроса указывают, какое желаемое действие выполнится для данного ресурса.

Каждый реализует свою семантику (от греч. σημαντιϰός – обозначающий), но каждая группа команд разделяет общие свойства: так, методы могут быть безопасными, идемпотентными или кешируемыми.

GET
Запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

POST
Используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

PUT
Заменяет все текущие представления ресурса данными запроса.

PATCH
Используется для частичного изменения ресурса.

DELETE
Удаляет указанный ресурс.

HEAD
Запрашивает ресурс так же, как и метод GET, но без тела ответа.

CONNECT
Устанавливает "туннель" к серверу, определённому по ресурсу.

OPTIONS
Используется для описания параметров соединения с ресурсом.

TRACE
Выполняет вызов возвращаемого тестового сообщения с ресурса.

11) Безопасные HTTP методы

Метод является безопастным, если он не меняет состояние сервера. Т.е. такой метод проводит только чтение информации.
Безопастными являются методы GET, HEAD, OPTIONS. Все безопастные методы идемпотентны.
При запросе информации безопастными методами сервер может изменить свое состояние, например он сохраняет статистику.
 
10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
GET, HEAD, PUT, OPTIONS, и DELETE идемпотентны.

4) HTTP статус коды сервера

5) Что такое ядро браузера

Представляет собой программу, которая преобразует содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т. д.) и информацию о форматировании (в форматах CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на экране. Браузерный движок обычно используется в веб-браузерах (отсюда название), почтовых клиентах и других программах, нуждающихся в отображении и редактировании содержимого веб-страниц.

6) Какие браузеры какиие ядра используют

Chrome, Microsoft Edge, Opera, Vivaldi - Blink — движок браузера Chromium (ответвление WebKit).
Mozilla, Firefox - Gecko — открытый движок проекта Mozilla.
Google Chrome (до 2013 года) - WebKit — движок для браузера Apple Safari.

7) Что такое API

Application Programming Interface — «программный интерфейс приложения».
описание способов (набор классов, процедур, функций, структур или констант), которыми одна компьютерная программа может:
взаимодействовать с другой программой, 
обмениваться информацией, 
передавать информацию из одного интерфейса, например мобильного приложения, в другой.
Т.е. программные компоненты взаимодействуют друг с другом посредством API.
Чтобы сгенерировать полную веб-страницу, браузер ожидает ответ на языке разметки HTML, в то время как API вернёт просто данные в формате вроде JSON.
Самые популярные протоколы API - REST и SOAP - используются подавляющим большинством открытых API-интерфейсов.
SOAP — это формат протокола. REST — это архитектурный подход.
В SOAP используется формат SOAP XML для запросов и ответов.
В REST обмен сообщениями происходит на основе XML, JSON или любого другого удобного формата.


8) Что такое ендпоинты

endpoint - это только часть url
конечная точка — это один конец канала связи
Когда API взаимодействует с другой системой, точки взаимодействия этого взаимодействия считаются конечными точками.
Root-endpoint  - это точка приема запроса на стороне сервера.

9) URL (URI, URL, URN)

Uniform Resource Identifier (унифицированный идентификатор ресурса) - указывает, где и как найти ресурс. При формировании конкретного запроса к нему могут добавляться разные параметры. Комбинация этих параметров и URL представляет URI.
URL — это URI, который, помимо идентификации ресурса, предоставляет ещё и информацию о местонахождении этого ресурса. 
URN — это URI, который только идентифицирует ресурс в определённом пространстве имён (и, соответственно, в определённом контексте), но не указывает его местонахождение.

12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов